using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace NumpadWPF
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        DispatcherTimer timer = new DispatcherTimer();
        DispatcherTimer buttonSwapper = new DispatcherTimer();
        Random random = new Random();
        Button[] buttonsCollection;
        byte randomRange;
        int buffer;
        public MainWindow()
        {
            InitializeComponent();
            timer.Interval = TimeSpan.FromSeconds(5);
            buttonSwapper.Interval = TimeSpan.FromSeconds(5);
            timer.Tick += timer_Tick;
            buttonSwapper.Tick += buttonSwapper_Tick;
            buttonSwapper.Start();
            buttonsCollection = new Button[10]
            {
               button0,
               button1,
               button2,
               button3,
               button4,
               button5,
               button6,
               button7,
               button8,
               button9
            };
        }

        private void timer_Tick(object sender, object e)
        {
            passwordBox.Text = "";
            UIAccess(true);
            timer.Stop();
        }

        private void buttonSwapper_Tick(object sender, object e)
        {
            List<string> number = new List<string>(){ "1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
            randomRange = 10;
            foreach(Button button in buttonsCollection)
            {
                buffer = random.Next(0, randomRange);
                button.Content = number[buffer];
                byte[] color = new byte[3];
                random.NextBytes(color);
                button.Background = new SolidColorBrush(Color.FromRgb(color[0], color[1], color[2]));
                number.Remove(number[buffer]);
                randomRange--;
            }
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            Button button = e.Source as Button;
            Button_Logic(button.Content.ToString());
        }

        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
            Button button = e.Source as Button;
            Button_Logic(button.Content.ToString());
        }

        private void Button_Click_3(object sender, RoutedEventArgs e)
        {
            Button button = e.Source as Button;
            Button_Logic(button.Content.ToString());
        }

        private void Button_Click_4(object sender, RoutedEventArgs e)
        {
            Button button = e.Source as Button;
            Button_Logic(button.Content.ToString());
        }

        private void Button_Click_5(object sender, RoutedEventArgs e)
        {
            Button button = e.Source as Button;
            Button_Logic(button.Content.ToString());
        }

        private void Button_Click_6(object sender, RoutedEventArgs e)
        {
            Button button = e.Source as Button;
            Button_Logic(button.Content.ToString());
        }

        private void Button_Click_7(object sender, RoutedEventArgs e)
        {
            Button button = e.Source as Button;
            Button_Logic(button.Content.ToString());
        }

        private void Button_Click_8(object sender, RoutedEventArgs e)
        {
            Button button = e.Source as Button;
            Button_Logic(button.Content.ToString());
        }

        private void Button_Click_9(object sender, RoutedEventArgs e)
        {
            Button button = e.Source as Button;
            Button_Logic(button.Content.ToString());
        }

        private void Button_Click_0(object sender, RoutedEventArgs e)
        {
            Button button = e.Source as Button;
            Button_Logic(button.Content.ToString());
        }

        private void Button_Click_X(object sender, RoutedEventArgs e)
        {
            Button button = e.Source as Button;
            Button_Logic(button.Content.ToString());
        }

        private void Button_Click_Ok(object sender, RoutedEventArgs e)
        {
            Button button = e.Source as Button;
            Button_Logic(button.Content.ToString());
        }

        private void Button_Logic(string option)
        {
            switch (option)
            {
                case "1":
                    passwordBox.AppendText("1");
                    break;
                case "2":
                    passwordBox.AppendText("2");
                    break;
                case "3":
                    passwordBox.AppendText("3");
                    break;
                case "4":
                    passwordBox.AppendText("4");
                    break;
                case "5":
                    passwordBox.AppendText("5");
                    break;
                case "6":
                    passwordBox.AppendText("6");
                    break;
                case "7":
                    passwordBox.AppendText("7");
                    break;
                case "8":
                    passwordBox.AppendText("8");
                    break;
                case "9":
                    passwordBox.AppendText("9");
                    break;
                case "0":
                    passwordBox.AppendText("0");
                    break;
                case "OK":
                    if (passwordBox.Text == "332168")
                    {
                        UIAccess(false);
                        passwordBox.Text = "Access Granted";
                    }
                    else
                    {
                        passwordBox.Text = "Error";
                        UIAccess(false);
                        timer.Start();
                    }
                    break;
                case "X":
                    passwordBox.Text = "";
                    break;
            }
        }

        private void UIAccess(bool access)
        {
            button0.IsEnabled = access;
            button1.IsEnabled = access;
            button2.IsEnabled = access;
            button3.IsEnabled = access;
            button4.IsEnabled = access;
            button5.IsEnabled = access;
            button6.IsEnabled = access;
            button7.IsEnabled = access;
            button8.IsEnabled = access;
            button9.IsEnabled = access;
            buttonOk.IsEnabled = access;
            buttonX.IsEnabled = access;
            passwordBox.IsEnabled = access;
        }

        private void passwordBox_TextChanged(object sender, TextChangedEventArgs e)
        {

        }
    }
}
